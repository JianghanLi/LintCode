class Solution:
    """
    @param n: The number of tasks
    @param t: The time array t
    @param p: The probability array p
    @return: Return the order
    """
    def getOrder(self, n, t, p):
        res = [[i + 1, t[i], p[i]] for i in range(n)]
        res.sort(key=lambda x: -float(x[2]) / x[1] + float(x[0]) / 10000000)
        # res.sort(key=lambda x: -x[0])
        return [x[0] for x in res]

        ############ test cases ###########
s = Solution()
# print s.getOrder(n=1, t=[1], p=[1.0])  # [1]
# print s.getOrder(n=2, t=[1, 2], p=[0.3, 0.7])  # [2, 1]
print s.getOrder(31,
                 [9, 7, 2, 10, 8, 7, 2, 7, 9, 8, 4, 1, 9, 8, 9, 7, 5, 6, 6, 3, 1, 7, 2, 1, 1, 4, 2, 7, 5, 9, 5],
                 [0.38, 0.22, 0.61, 0.21, 0.00, 0.91, 0.81, 0.04, 0.63, 0.93, 0.74, 0.49, 0.08, 0.12, 0.59, 0.72, 0.22, 0.60, 0.23, 0.51, 0.76, 0.28, 0.45, 0.97, 0.23, 0.42, 0.20, 0.17, 0.26, 0.23, 0.36])  # [2, 1]
print s.getOrder(42,
                 [1, 7, 5, 8, 10, 1, 6, 7, 8, 5, 3, 9, 7, 5, 7, 5, 2, 8, 2, 10, 8, 5, 10, 4, 2, 1, 4, 3, 6, 2, 5, 2, 3, 1, 10, 2, 1, 3, 9, 1, 2, 4],
                 [0.33, 0.16, 0.82, 0.31, 0.47, 0.20, 0.68, 0.50, 0.25, 0.63, 0.41, 0.09, 0.69, 0.69, 0.19, 0.30, 0.80, 0.04, 0.04, 0.66, 0.48, 0.84, 0.34, 0.27, 0.38, 0.47, 0.91, 0.23, 0.10, 0.22, 0.93, 0.19, 0.45, 0.21, 0.23, 0.96, 0.36, 0.98, 0.41, 0.43, 0.65, 0.15])  # [2, 1]
